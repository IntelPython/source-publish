# Copyright (C) 2021 Simon Josefsson

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# bootstrapping docs
printf "gdoc_MANS =\ngdoc_TEXINFOS =\n" > doc/Makefile.gdoc

# gnulib library name
source_base=gl
tests_base=gl/tests
m4_base=gl/m4
gnulib_name=libgnu
gnulib_tool_option_extras="--no-vc-files"
checkout_only_file=.gitignore

gnulib_modules="
  autobuild
  csharpcomp-script
  csharpexec-script
  error
  fdl-1.3
  getline
  getopt-gnu
  git-version-gen
  gitlog-to-changelog
  lib-msvc-compat
  lib-symbol-versions
  lib-symbol-visibility
  manywarnings
  pmccabe2html
  progname
  readme-release
  update-copyright
  useless-if-before-free
  valgrind-tests
  version-etc
"

lib_modules="
  gettext-h
  langinfo
  stdint
  striconv
  strverscmp
  unistr/u8-check
"

# Build prerequisites
buildreq="\
autoconf   2.64
automake   1.13
git        1.4.4
perl       5.5
make       -
gperf      -
gengetopt  -
"

GTKDOCIZE=$(which gtkdocize 2>/dev/null)
if test $? -ne 0; then
  echo "No gtk-doc support found. You can't build the docs."
  # rm because gtk-doc.make might be a link to a protected file
  rm -f gtk-doc.make 2>/dev/null
  echo "EXTRA_DIST =" >gtk-doc.make
  echo "CLEANFILES =" >>gtk-doc.make
  GTKDOCIZE=""
else
  mkdir -p lib/m4
  $GTKDOCIZE
fi

bootstrap_post_import_hook ()
{
  # No test modules are used but 'valgrind-tests' make gnulib-tool
  # believe we need this.
  rm -rf gl/tests

  ${GNULIB_SRCDIR}/gnulib-tool --without-tests --libtool --macro-prefix=lgl --lgpl=2 --dir=. --lib=libgnu --source-base=lib/gl --m4-base=lib/gl/m4 --no-vc-files --import ${lib_modules}

  # Autopoint and libtoolize puts there M4 macros in
  # AC_CONFIG_MACRO_DIR which is lib/m4 in this project.  The
  # ./bootstrap script puts their M4 macros in gl/m4 and lib/gl/m4
  # respectively.

  # The M4 files from gnulib must be preferred over the files from
  # autopoint and libtoolize, or you get build errors since gnulib
  # (both M4 macros and the *.in.h header file stubs) assume they are
  # using the gnulib M4 macros.  (It may be possible to solve this
  # with clever ordering of -I's but then you would still have
  # multiple versions of the same M4 macro in your tarball.)

  # In most projects, the M4 files from one single gnulib-tool
  # instance would overwrite all autopoint/libtoolize M4 files, and
  # then you would use that m4-base as the AC_CONFIG_MACRO_DIR value
  # and everything would work.

  # In this project it happens that some M4 files are put in gl/m4/
  # and some in lib/gl/m4/ and that neither directory contains a
  # strict superset of the M4 files that were copied into lib/m4/.
  #
  # The following is the generic solution to make sure any
  # autopoint/libtoolize M4 macros are not used, but instead the
  # version from gnulib ends up being used.
  echo Removing older autopoint/libtool M4 macros...
  for f in `cd lib/m4 && ls *.m4`; do
      test -f gl/m4/$f && rm -fv lib/m4/$f
      test -f lib/gl/m4/$f && rm -fv lib/m4/$f
  done

  # Automake requires that ChangeLog exist.
  touch ChangeLog || return 1
}

bootstrap_tarcache=$GNULIB_BOOTSTRAP_CACHE/bootstrap-files-for-$package.tar.gz

bootstrap_epilogue ()
{
  if test -n "$GNULIB_BOOTSTRAP_CACHE"; then
    mkdir -p $GNULIB_BOOTSTRAP_CACHE
    echo Saving a cache of generated files to $ltar...
    tar cfz $bootstrap_tarcache `git ls-files --others`
  fi
}

if test -f $bootstrap_tarcache; then
  echo Discovered bootstrap cache $bootstrap_tarcache, using it...
  tar xfa $bootstrap_tarcache
  exit 0
fi
